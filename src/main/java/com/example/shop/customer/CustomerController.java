package com.example.shop.customer;

import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
//import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import com.example.shop.model.Customer;
import com.example.shop.model.User;
//import com.example.shop.productController.ProductRepository;
import com.example.shop.customer.CustomerRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/customer") // This means URL's start with /demo (after Application path)
public class CustomerController {
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
private CustomerRepository customerRepository;

@GetMapping(path="/add") // Map ONLY GET Requests
public @ResponseBody String addNewCustomer (@RequestParam String name
	, @RequestParam String address , @RequestParam String email, @RequestParam String password,
	 @RequestParam String phone, @RequestParam @DateTimeFormat(pattern = "yyyy-MM-dd") Date dob) {
// @ResponseBody means the returned String is the response, not a view name
// @RequestParam means it is a parameter from the GET or POST request

Customer c = new Customer();
c.setName(name);
c.setAddress(address);
c.setEmail(email);
c.setPassword(password);
c.setPhone(phone);
c.setDob(dob);
customerRepository.save(c) ; 
return "Saved";
}								/*	*/

@GetMapping(path="/all")
public @ResponseBody Iterable<Customer> getAllCustomers() {
// This returns a JSON or XML with the users
return customerRepository.findAll();
}

@GetMapping(path="/login1")
public @ResponseBody Integer login(@RequestBody User user) {
	String email = user.getEmail();
	String password = user.getPassword();
	Integer Id = 0;
	try {
	  Customer c = customerRepository.findByEmail(email);
	  if(c.getPassword().equals(password)) {		  
		  Id = c.getCustId();}
	}
	catch(NullPointerException e) {
		Id = 0;
	}
	 
	  return Id;
}

@GetMapping(path="/login") // Map ONLY GET Requests
  public @ResponseBody Integer login(@RequestParam String email, @RequestParam String password) {
	Integer Id = 0;
	try {
	  Customer c = customerRepository.findByEmail(email);
	  if(c.getPassword().equals(password)) {		  
		  Id = c.getCustId();}
	}
	catch(NullPointerException e) {
		Id = 0;
	}
	 
	  return Id;
		  
	  
	
}								

}
